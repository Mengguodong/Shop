//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34209
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.34209 版自动生成。
// 
#pragma warning disable 1591

namespace SFO2O.BLL.com.hksmspro.api3 {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SmsAPI5Soap", Namespace="Able")]
    public partial class SmsAPI5 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SendMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageScheduleOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageScheduleWithSenderOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMessageScheduleOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageWithSenderOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageWithSenderForSmppOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetXml_MessageTotalOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetXML_DeliveryReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetControlTimeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SmsAPI5() {
            this.Url = global::SFO2O.BLL.Properties.Settings.Default.SFO2O_BLL_com_hksmspro_api3_SmsAPI5;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SendMessageCompletedEventHandler SendMessageCompleted;
        
        /// <remarks/>
        public event SendMessageScheduleCompletedEventHandler SendMessageScheduleCompleted;
        
        /// <remarks/>
        public event SendMessageScheduleWithSenderCompletedEventHandler SendMessageScheduleWithSenderCompleted;
        
        /// <remarks/>
        public event DeleteMessageScheduleCompletedEventHandler DeleteMessageScheduleCompleted;
        
        /// <remarks/>
        public event SendMessageWithSenderCompletedEventHandler SendMessageWithSenderCompleted;
        
        /// <remarks/>
        public event SendMessageWithSenderForSmppCompletedEventHandler SendMessageWithSenderForSmppCompleted;
        
        /// <remarks/>
        public event GetXml_MessageTotalCompletedEventHandler GetXml_MessageTotalCompleted;
        
        /// <remarks/>
        public event GetXML_DeliveryReportCompletedEventHandler GetXML_DeliveryReportCompleted;
        
        /// <remarks/>
        public event SetControlTimeCompletedEventHandler SetControlTimeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Able/SendMessage", RequestNamespace="Able", ResponseNamespace="Able", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendMessage(string Username, string Password, string Hex, string Message, string Telephone, string UserDefineNo) {
            object[] results = this.Invoke("SendMessage", new object[] {
                        Username,
                        Password,
                        Hex,
                        Message,
                        Telephone,
                        UserDefineNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageAsync(string Username, string Password, string Hex, string Message, string Telephone, string UserDefineNo) {
            this.SendMessageAsync(Username, Password, Hex, Message, Telephone, UserDefineNo, null);
        }
        
        /// <remarks/>
        public void SendMessageAsync(string Username, string Password, string Hex, string Message, string Telephone, string UserDefineNo, object userState) {
            if ((this.SendMessageOperationCompleted == null)) {
                this.SendMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageOperationCompleted);
            }
            this.InvokeAsync("SendMessage", new object[] {
                        Username,
                        Password,
                        Hex,
                        Message,
                        Telephone,
                        UserDefineNo}, this.SendMessageOperationCompleted, userState);
        }
        
        private void OnSendMessageOperationCompleted(object arg) {
            if ((this.SendMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageCompleted(this, new SendMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Able/SendMessageSchedule", RequestNamespace="Able", ResponseNamespace="Able", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendMessageSchedule(string Username, string Password, string Hex, string Message, string Telephone, string UserDefineNo, string SendTime, string Optoutfilter) {
            object[] results = this.Invoke("SendMessageSchedule", new object[] {
                        Username,
                        Password,
                        Hex,
                        Message,
                        Telephone,
                        UserDefineNo,
                        SendTime,
                        Optoutfilter});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageScheduleAsync(string Username, string Password, string Hex, string Message, string Telephone, string UserDefineNo, string SendTime, string Optoutfilter) {
            this.SendMessageScheduleAsync(Username, Password, Hex, Message, Telephone, UserDefineNo, SendTime, Optoutfilter, null);
        }
        
        /// <remarks/>
        public void SendMessageScheduleAsync(string Username, string Password, string Hex, string Message, string Telephone, string UserDefineNo, string SendTime, string Optoutfilter, object userState) {
            if ((this.SendMessageScheduleOperationCompleted == null)) {
                this.SendMessageScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageScheduleOperationCompleted);
            }
            this.InvokeAsync("SendMessageSchedule", new object[] {
                        Username,
                        Password,
                        Hex,
                        Message,
                        Telephone,
                        UserDefineNo,
                        SendTime,
                        Optoutfilter}, this.SendMessageScheduleOperationCompleted, userState);
        }
        
        private void OnSendMessageScheduleOperationCompleted(object arg) {
            if ((this.SendMessageScheduleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageScheduleCompleted(this, new SendMessageScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Able/SendMessageScheduleWithSender", RequestNamespace="Able", ResponseNamespace="Able", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendMessageScheduleWithSender(string Username, string Password, string Hex, string Message, string Telephone, string UserDefineNo, string SendTime, string Sender) {
            object[] results = this.Invoke("SendMessageScheduleWithSender", new object[] {
                        Username,
                        Password,
                        Hex,
                        Message,
                        Telephone,
                        UserDefineNo,
                        SendTime,
                        Sender});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageScheduleWithSenderAsync(string Username, string Password, string Hex, string Message, string Telephone, string UserDefineNo, string SendTime, string Sender) {
            this.SendMessageScheduleWithSenderAsync(Username, Password, Hex, Message, Telephone, UserDefineNo, SendTime, Sender, null);
        }
        
        /// <remarks/>
        public void SendMessageScheduleWithSenderAsync(string Username, string Password, string Hex, string Message, string Telephone, string UserDefineNo, string SendTime, string Sender, object userState) {
            if ((this.SendMessageScheduleWithSenderOperationCompleted == null)) {
                this.SendMessageScheduleWithSenderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageScheduleWithSenderOperationCompleted);
            }
            this.InvokeAsync("SendMessageScheduleWithSender", new object[] {
                        Username,
                        Password,
                        Hex,
                        Message,
                        Telephone,
                        UserDefineNo,
                        SendTime,
                        Sender}, this.SendMessageScheduleWithSenderOperationCompleted, userState);
        }
        
        private void OnSendMessageScheduleWithSenderOperationCompleted(object arg) {
            if ((this.SendMessageScheduleWithSenderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageScheduleWithSenderCompleted(this, new SendMessageScheduleWithSenderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Able/DeleteMessageSchedule", RequestNamespace="Able", ResponseNamespace="Able", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteMessageSchedule(string Username, string Password, string MessageID) {
            object[] results = this.Invoke("DeleteMessageSchedule", new object[] {
                        Username,
                        Password,
                        MessageID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteMessageScheduleAsync(string Username, string Password, string MessageID) {
            this.DeleteMessageScheduleAsync(Username, Password, MessageID, null);
        }
        
        /// <remarks/>
        public void DeleteMessageScheduleAsync(string Username, string Password, string MessageID, object userState) {
            if ((this.DeleteMessageScheduleOperationCompleted == null)) {
                this.DeleteMessageScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMessageScheduleOperationCompleted);
            }
            this.InvokeAsync("DeleteMessageSchedule", new object[] {
                        Username,
                        Password,
                        MessageID}, this.DeleteMessageScheduleOperationCompleted, userState);
        }
        
        private void OnDeleteMessageScheduleOperationCompleted(object arg) {
            if ((this.DeleteMessageScheduleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMessageScheduleCompleted(this, new DeleteMessageScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Able/SendMessageWithSender", RequestNamespace="Able", ResponseNamespace="Able", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendMessageWithSender(string Username, string Password, string Hex, string Message, string Telephone, string UserDefineNo, string Sender) {
            object[] results = this.Invoke("SendMessageWithSender", new object[] {
                        Username,
                        Password,
                        Hex,
                        Message,
                        Telephone,
                        UserDefineNo,
                        Sender});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageWithSenderAsync(string Username, string Password, string Hex, string Message, string Telephone, string UserDefineNo, string Sender) {
            this.SendMessageWithSenderAsync(Username, Password, Hex, Message, Telephone, UserDefineNo, Sender, null);
        }
        
        /// <remarks/>
        public void SendMessageWithSenderAsync(string Username, string Password, string Hex, string Message, string Telephone, string UserDefineNo, string Sender, object userState) {
            if ((this.SendMessageWithSenderOperationCompleted == null)) {
                this.SendMessageWithSenderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageWithSenderOperationCompleted);
            }
            this.InvokeAsync("SendMessageWithSender", new object[] {
                        Username,
                        Password,
                        Hex,
                        Message,
                        Telephone,
                        UserDefineNo,
                        Sender}, this.SendMessageWithSenderOperationCompleted, userState);
        }
        
        private void OnSendMessageWithSenderOperationCompleted(object arg) {
            if ((this.SendMessageWithSenderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageWithSenderCompleted(this, new SendMessageWithSenderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Able/SendMessageWithSenderForSmpp", RequestNamespace="Able", ResponseNamespace="Able", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendMessageWithSenderForSmpp(string Username, string Password, string Hex, string Message, string Telephone, string UserDefineNo, string Sender) {
            object[] results = this.Invoke("SendMessageWithSenderForSmpp", new object[] {
                        Username,
                        Password,
                        Hex,
                        Message,
                        Telephone,
                        UserDefineNo,
                        Sender});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageWithSenderForSmppAsync(string Username, string Password, string Hex, string Message, string Telephone, string UserDefineNo, string Sender) {
            this.SendMessageWithSenderForSmppAsync(Username, Password, Hex, Message, Telephone, UserDefineNo, Sender, null);
        }
        
        /// <remarks/>
        public void SendMessageWithSenderForSmppAsync(string Username, string Password, string Hex, string Message, string Telephone, string UserDefineNo, string Sender, object userState) {
            if ((this.SendMessageWithSenderForSmppOperationCompleted == null)) {
                this.SendMessageWithSenderForSmppOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageWithSenderForSmppOperationCompleted);
            }
            this.InvokeAsync("SendMessageWithSenderForSmpp", new object[] {
                        Username,
                        Password,
                        Hex,
                        Message,
                        Telephone,
                        UserDefineNo,
                        Sender}, this.SendMessageWithSenderForSmppOperationCompleted, userState);
        }
        
        private void OnSendMessageWithSenderForSmppOperationCompleted(object arg) {
            if ((this.SendMessageWithSenderForSmppCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageWithSenderForSmppCompleted(this, new SendMessageWithSenderForSmppCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Able/GetXml_MessageTotal", RequestNamespace="Able", ResponseNamespace="Able", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetXml_MessageTotal(string Username, string Password) {
            object[] results = this.Invoke("GetXml_MessageTotal", new object[] {
                        Username,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetXml_MessageTotalAsync(string Username, string Password) {
            this.GetXml_MessageTotalAsync(Username, Password, null);
        }
        
        /// <remarks/>
        public void GetXml_MessageTotalAsync(string Username, string Password, object userState) {
            if ((this.GetXml_MessageTotalOperationCompleted == null)) {
                this.GetXml_MessageTotalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetXml_MessageTotalOperationCompleted);
            }
            this.InvokeAsync("GetXml_MessageTotal", new object[] {
                        Username,
                        Password}, this.GetXml_MessageTotalOperationCompleted, userState);
        }
        
        private void OnGetXml_MessageTotalOperationCompleted(object arg) {
            if ((this.GetXml_MessageTotalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetXml_MessageTotalCompleted(this, new GetXml_MessageTotalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Able/GetXML_DeliveryReport", RequestNamespace="Able", ResponseNamespace="Able", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetXML_DeliveryReport(string Username, string Password, string ResponseID) {
            object[] results = this.Invoke("GetXML_DeliveryReport", new object[] {
                        Username,
                        Password,
                        ResponseID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetXML_DeliveryReportAsync(string Username, string Password, string ResponseID) {
            this.GetXML_DeliveryReportAsync(Username, Password, ResponseID, null);
        }
        
        /// <remarks/>
        public void GetXML_DeliveryReportAsync(string Username, string Password, string ResponseID, object userState) {
            if ((this.GetXML_DeliveryReportOperationCompleted == null)) {
                this.GetXML_DeliveryReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetXML_DeliveryReportOperationCompleted);
            }
            this.InvokeAsync("GetXML_DeliveryReport", new object[] {
                        Username,
                        Password,
                        ResponseID}, this.GetXML_DeliveryReportOperationCompleted, userState);
        }
        
        private void OnGetXML_DeliveryReportOperationCompleted(object arg) {
            if ((this.GetXML_DeliveryReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetXML_DeliveryReportCompleted(this, new GetXML_DeliveryReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Able/SetControlTime", RequestNamespace="Able", ResponseNamespace="Able", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetControlTime(string Username, string Password, string FromHour, string ToHour) {
            object[] results = this.Invoke("SetControlTime", new object[] {
                        Username,
                        Password,
                        FromHour,
                        ToHour});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetControlTimeAsync(string Username, string Password, string FromHour, string ToHour) {
            this.SetControlTimeAsync(Username, Password, FromHour, ToHour, null);
        }
        
        /// <remarks/>
        public void SetControlTimeAsync(string Username, string Password, string FromHour, string ToHour, object userState) {
            if ((this.SetControlTimeOperationCompleted == null)) {
                this.SetControlTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetControlTimeOperationCompleted);
            }
            this.InvokeAsync("SetControlTime", new object[] {
                        Username,
                        Password,
                        FromHour,
                        ToHour}, this.SetControlTimeOperationCompleted, userState);
        }
        
        private void OnSetControlTimeOperationCompleted(object arg) {
            if ((this.SetControlTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetControlTimeCompleted(this, new SetControlTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SendMessageCompletedEventHandler(object sender, SendMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SendMessageScheduleCompletedEventHandler(object sender, SendMessageScheduleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SendMessageScheduleWithSenderCompletedEventHandler(object sender, SendMessageScheduleWithSenderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageScheduleWithSenderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageScheduleWithSenderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void DeleteMessageScheduleCompletedEventHandler(object sender, DeleteMessageScheduleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteMessageScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteMessageScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SendMessageWithSenderCompletedEventHandler(object sender, SendMessageWithSenderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageWithSenderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageWithSenderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SendMessageWithSenderForSmppCompletedEventHandler(object sender, SendMessageWithSenderForSmppCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageWithSenderForSmppCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageWithSenderForSmppCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetXml_MessageTotalCompletedEventHandler(object sender, GetXml_MessageTotalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetXml_MessageTotalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetXml_MessageTotalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetXML_DeliveryReportCompletedEventHandler(object sender, GetXML_DeliveryReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetXML_DeliveryReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetXML_DeliveryReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SetControlTimeCompletedEventHandler(object sender, SetControlTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetControlTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetControlTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591